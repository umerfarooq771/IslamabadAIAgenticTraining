import os, time
from dotenv import load_dotenv
from azure.ai.projects import AIProjectClient
from azure.identity import DefaultAzureCredential
from azure.ai.agents.models import (
    McpTool,
    RequiredMcpToolCall,
    SubmitToolApprovalAction,
    ToolApproval,
    ListSortOrder
)

# Load environment variables
load_dotenv()
azure_foundry_project_endpoint = os.getenv("AI_FOUNDRY_ENDPOINT")
azure_foundry_deployment = os.getenv("AI_FOUNDRY_DEPLOYMENT_NAME")

# Azure REST API MCP server
mcp_server_url = "https://gitmcp.io/Azure/azure-rest-api-specs"
mcp_server_label = "azurerest"   # ‚úÖ FIXED (no hyphen)

# Create project client
project_client = AIProjectClient(
    endpoint=azure_foundry_project_endpoint,
    credential=DefaultAzureCredential(),
)

# Define MCP tool
mcp_tool = McpTool(
    server_label=mcp_server_label,
    server_url=mcp_server_url,
)

with project_client:
    agents_client = project_client.agents

    # Create agent with MCP tool
    agent = agents_client.create_agent(
        model=azure_foundry_deployment,
        name="Azure REST MCP Agent",
        instructions="You are a helpful agent that can use MCP tools. Use them when needed.",
        tools=mcp_tool.definitions,
    )
    print(f"‚úÖ Created agent, ID: {agent.id}")
    print(f"üîå MCP Server: {mcp_tool.server_label} at {mcp_tool.server_url}")

    # Create thread
    thread = agents_client.threads.create()
    print(f"‚úÖ Created thread, ID: {thread.id}")

    # Ask a simple question
    message = agents_client.messages.create(
        thread_id=thread.id,
        role="user",
        content="Summarize in one line what the Azure REST API specifications are.",
    )
    print(f"üí¨ Created message, ID: {message.id}")

    # Start run
    run = agents_client.runs.create(
        thread_id=thread.id,
        agent_id=agent.id,
        tool_resources=mcp_tool.resources,
    )
    print(f"üöÄ Created run, ID: {run.id}")

    # Poll run status
    while run.status in ["queued", "in_progress", "requires_action"]:
        time.sleep(1)
        run = agents_client.runs.get(thread_id=thread.id, run_id=run.id)

        if run.status == "requires_action" and isinstance(run.required_action, SubmitToolApprovalAction):
            tool_calls = run.required_action.submit_tool_approval.tool_calls
            tool_approvals = []
            for tool_call in tool_calls:
                if isinstance(tool_call, RequiredMcpToolCall):
                    print(f"‚ö° Approving tool call: {tool_call.id}")
                    tool_approvals.append(
                        ToolApproval(
                            tool_call_id=tool_call.id,
                            approve=True,
                            headers=mcp_tool.headers,
                        )
                    )
            if tool_approvals:
                agents_client.runs.submit_tool_outputs(
                    thread_id=thread.id, run_id=run.id, tool_approvals=tool_approvals
                )

        print(f"‚è≥ Current run status: {run.status}")

    print(f"üèÅ Run completed with status: {run.status}")

    # Show conversation
    messages = agents_client.messages.list(thread_id=thread.id, order=ListSortOrder.ASCENDING)
    print("\nüó®Ô∏è Conversation:")
    print("-" * 50)
    for msg in messages:
        if msg.text_messages:
            last_text = msg.text_messages[-1]
            print(f"{msg.role.upper()}: {last_text.text.value}")
            print("-" * 50)
